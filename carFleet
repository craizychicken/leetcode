class Solution:
    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:
        pair = [(p,s)for p,s in zip(position,speed)]
        pair.sort(reverse=True) # Time complexity O(nlogn)
        stack = [] # Using the stack aproach
        for p,s in pair:
            stack.append((target-p)/s)
            if len(stack)>1 and stack[-1]<=stack[-2]: # Decides if cars would be a fleet
                stack.pop()
        return len(stack)
